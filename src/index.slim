<!DOCTYPE html>
html lang="en"
  head
    meta charset="UTF-8"/
    meta name="viewport" content="width=device-width, initial-scale=1.0"/
    meta http-equiv="X-UA-Compatible" content="ie=edge"/
    title Document
  body
    nav#navbar
      header 
        h1 JS Documentation
      ul
        li
          a.nav-link href="#Introduction" Introduction
        li 
          a.nav-link href="#What_you_should_already_know" What you should already know
        li
          a.nav-link href="#JavaScript_and_Java" JavaScript and Java
        li
          a.nav-link href="#Hello_world" Hello world
        li
          a.nav-link href="#Variables" Variables
        li
          a.nav-link href="#Data_types" Data types
        li
          a.nav-link href="#While_statement" while statement
        li
          a.nav-link href="#Function_declarations" Function declarations
        li
          a.nav-link href="#Reference" Reference
    main#main-doc
      section.main-section#Introduction 
        header
          h2 Introduction
        .main-content
          p JavaScript is a cross-platform, object-oriented scripting language. It is a small and lightweight language. Inside a host environment (for example, a web browser), JavaScript can be connected to the objects of its environment to provide programmatic control over them.
          p JavaScript contains a standard library of objects, such as Array, Date, and Math, and a core set of language elements such as operators, control structures, and statements. Core JavaScript can be extended for a variety of purposes by supplementing it with additional objects; for example:
          ul
            li Client-side JavaScript extends the core language by supplying objects to control a browser and its Document Object Model (DOM). For example, client-side extensions allow an application to place elements on an HTML form and respond to user events such as mouse clicks, form input, and page navigation
            li Server-side JavaScript extends the core language by supplying objects relevant to running JavaScript on a server. For example, server-side extensions allow an application to communicate with a database, provide continuity of information from one invocation to another of the application, or perform file manipulations on a server.
      section.main-section#What_you_should_already_know 
        header
          h2 What you should already know
        .main-content
          p This guide assumes you have the following basic background:
          ul
            li A general understanding of the Internet and the World Wide Web (WWW).
            li Good working knowledge of HyperText Markup Language (HTML).
            li Some programming experience. If you are new to programming, try one of the tutorials linked on the main page about JavaScript
      section.main-section#JavaScript_and_Java 
        header
          h2 JavaScript and Java
        .main-content
          p JavaScript and Java are similar in some ways but fundamentally different in some others. The JavaScript language resembles Java but does not have Java's static typing and strong type checking. JavaScript follows most Java expression syntax, naming conventions and basic control-flow constructs which was the reason why it was renamed from LiveScript to JavaScript.
          p In contrast to Java's compile-time system of classes built by declarations, JavaScript supports a runtime system based on a small number of data types representing numeric, Boolean, and string values. JavaScript has a prototype-based object model instead of the more common class-based object model. The prototype-based model provides dynamic inheritance; that is, what is inherited can vary for individual objects. JavaScript also supports functions without any special declarative requirements. Functions can be properties of objects, executing as loosely typed methods.
          p JavaScript is a very free-form language compared to Java. You do not have to declare all variables, classes, and methods. You do not have to be concerned with whether methods are public, private, or protected, and you do not have to implement interfaces. Variables, parameters, and function return types are not explicitly typed.
      section.main-section#Hello_world 
        header
          h2 Hello world
        .main-content
          p To get started with writing JavaScript, open the Scratchpad and write your first "Hello world" JavaScript code:
          code  
            | function greetMe(yourName) 
            br/
            | alert("Hello " + yourName); 
            br/
            | }
            br/
            | greetMe("World"); 
      section.main-section#Variables
          header 
            h2 Variables
          .main-content
            p You use variables as symbolic names for values in your application. The names of variables, called identifiers, conform to certain rules.
            p A JavaScript identifier must start with a letter, underscore (_), or dollar sign ($); subsequent characters can also be digits (0-9). Because JavaScript is case sensitive, letters include the characters "A" through "Z" (uppercase) and the characters "a" through "z" (lowercase).
            p You can use ISO 8859-1 or Unicode letters such as å and ü in identifiers. You can also use the Unicode escape sequences as characters in identifiers. Some examples of legal names are Number_hits, temp99, and _name.
      section.main-section#Data_types 
        header
          h2 Data types
        .main-content
          p The latest ECMAScript standard defines seven data types:
          ul
            li Six data types that are primitives:
              ul
                li Boolean. true and false.
                li null. A special keyword denoting a null value. Because JavaScript is case-sensitive, null is not the same as Null, NULL, or any other variant.
                li undefined. A top-level property whose value is undefined.
                li Number. 42 or 3.14159.
                li String. "Howdy"
                li Symbol (new in ECMAScript 2015). A data type whose instances are unique and immutable.
            li and Object
          p Although these data types are a relatively small amount, they enable you to perform useful functions with your applications. Objects and functions are the other fundamental elements in the language. You can think of objects as named containers for values, and functions as procedures that your application can perform.
      section.main-section#While_statement 
        header
          h2 While statement
        .main-content
          p A while statement executes its statements as long as a specified condition evaluates to true. A while statement looks as follows:
          code
            |while (condition)
            br/
            |statement
          p If the condition becomes false, statement within the loop stops executing and control passes to the statement following the loop.
          p The condition test occurs before statement in the loop is executed. If the condition returns true, statement is executed and the condition is tested again. If the condition returns false, execution stops and control is passed to the statement following while.
          p To execute multiple statements, use a block statement ({ ... }) to group those statements.
          p Example:
          p The following while loop iterates as long as n is less than three:
          code 
            | var n = 0;
            br
            | var x = 0;
            br
            | while (n < 3) {
            br
            |   n++;
            br
            |   x += n;
            br/
            | }
          p With each iteration, the loop increments n and adds that value to x. Therefore, x and n take on the following values:
          ul
            li After the first pass: n = 1 and x = 1
            li After the second pass: n = 2 and x = 3
            li After the third pass: n = 3 and x = 6
          p After completing the third pass, the condition n < 3 is no longer true, so the loop terminates.
      section.main-section#Function_declarations
        header 
          h2 Function declarations
        .main-content
          p A function definition (also called a function declaration, or function statement) consists of the function keyword, followed by:
          ul
            li The name of the function.
            li A list of arguments to the function, enclosed in parentheses and separated by commas.
            li The JavaScript statements that define the function, enclosed in curly brackets, { }.
            p For example, the following code defines a simple function named square:
          code
            | function square(number) {
            br
            | return number * number;
            br
            | }
          p The function square takes one argument, called number. The function consists of one statement that says to return the argument of the function (that is, number) multiplied by itself. The return statement specifies the value returned by the function.
          code 
            | return number * number;
          p Primitive parameters (such as a number) are passed to functions by value; the value is passed to the function, but if the function changes the value of the parameter, this change is not reflected globally or in the calling function.
      section.main-section#Reference 
        header
          h2 Reference
        .main-content
          p All the documentation in this page is taken from/
      
